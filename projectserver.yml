Description: >
    Udacity proect 2 server template
Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    InstanceType:
        Description: the Type of instance used, as specified
        Type: String
        Default: t2.medium
Resources:
    lbSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our load balancer
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
    webServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0
    iamPolicyRole:
        Type: AWS::IAM::Role
        Properties:
            Description: This is a role with user defined policy and a managed Aws policy(ARNs) 
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    Effect: Allow
                    Principal:
                        Service:
                            - ec2.amazonaws.com
                    Action: 
                        - 'sts:AssumeRole'
            
            ManagedPolicyArns: 
                - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
            Path: /
    instanceProfileRoleS3:
        Type: AWS::IAM::InstanceProfile
        Properties: 
            Path: /
            Roles: 
                - !Ref iamPolicyRole
    webAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt-get update -y
                    sudo apt-get install apache2 -y
                    sudo systemctl start apache2.service
                    cd /var/www/html
                    echo "Udacity Demo Web Server Up and Running!" > index.html          
            # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
            ImageId: ami-0263e4deb427da90e
            # ToDo: Change the key-pair name, as applicable to you. 
            #KeyName: proj3_keypair
            SecurityGroups:
            - Ref: webServerSecGroup
            InstanceType: !Ref InstanceType
            IamInstanceProfile: !Ref instanceProfileRoleS3
            BlockDeviceMappings:
            - DeviceName: "/dev/sdc"
              Ebs:
                VolumeSize: '10'
    webAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: webAppLaunchConfig
            MinSize: '1'
            MaxSize: '3'
            TargetGroupARNs:
            - Ref: webAppTargetGroup
    webAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
            - Ref: lbSecGroup
    listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn:
                  Ref: webAppTargetGroup
            LoadBalancerArn:
                Ref: webAppLB
            Port: '80'
            Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref 'webAppTargetGroup'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'listener'
            Priority: 1

    webAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
    website:
        Description: Domain name for website, ie Load balancer id
        Value: !Sub http://${webAppLB.DNSName}
        Export:
            Name: !Sub ${EnvironmentName}-website-URL